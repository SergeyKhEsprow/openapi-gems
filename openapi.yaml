openapi: 3.0.1
info:
  title: ETPMarket API Documentation
  description: This document contains basic workflow information how the application
    works, REST API and Web Sockets API documentations
  termsOfService: urn:tos
  version: "1.0"
servers:
- url: //etpmarkets.com/api/v1
tags:
- name: Exchanges
  description: REST API for working with exchanges
- name: Order Books
  description: REST API for working with Order Books
- name: Trading Gatways
  description: REST API for working with Trading Gatways
- name: Machine Instances
  description: REST API for working with Machine Isntances
- name: Payments
  description: REST API for working with Payments
- name: Users
  description: REST API for working with Users
paths:
  /exchanges:
    get:
      tags:
      - Exchanges
      summary: Get list of Exchanges for the current session
      operationId: getAllExchangesUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExchangeInfo'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    post:
      tags:
      - Exchanges
      summary: Create new Exchange
      operationId: createNewExchangeUsingPOST
      parameters:
      - name: exchangeName
        in: query
        required: true
        schema:
          type: string
      - name: exchangeDescription
        in: query
        schema:
          type: string
      - name: addPreConfiguredSettings
        in: query
        required: true
        schema:
          type: boolean
      - name: exchangeTypeId
        in: query
        required: true
        schema:
          type: string
      - name: editMachineInstance.cloudLocationId
        in: query
        required: true
        schema:
          type: string
      - name: dropletPerformance
        in: query
        required: true
        schema:
          type: string
      - name: sessionsNumber
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        400:
          description: Bad request
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    delete:
      tags:
      - Exchanges
      summary: Delete Exchanges
      operationId: deleteExchangesUsingDELETE
      parameters:
      - name: deleteIds
        in: query
        description: deleteIds
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        400:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
      deprecated: false
  /exchanges/{clientExchangeId}/order-books:
    get:
      tags:
      - Order Books
      summary: Get Order Books for the Exchange
      operationId: getOrderBookJsonUsingGET
      parameters:
      - name: clientExchangeId
        in: path
        description: clientExchangeId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderBook'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    post:
      tags:
      - Order Books
      summary: Add new Order Book to the Exchange
      operationId: addOrderBookUsingPOST
      parameters:
      - name: clientExchangeId
        in: path
        description: clientExchangeId
        required: true
        schema:
          type: integer
          format: int64
      - name: defaultOpeningPrice
        in: query
        required: true
        schema:
          type: number
          format: double
      - name: isinCode
        in: query
        required: true
        schema:
          type: string
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: type
        in: query
        required: true
        schema:
          type: string
          enum:
          - EQUITY
      - name: viewCode
        in: query
        required: true
        schema:
          type: string
      - name: bbgCode
        in: query
        schema:
          type: string
      - name: ricCode
        in: query
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /exchanges/order-books:
    put:
      tags:
      - Order Books
      summary: Edit Order Book
      operationId: editOrderBookUsingPUT
      parameters:
      - name: orderBookId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: defaultOpeningPrice
        in: query
        required: true
        schema:
          type: number
          format: double
      - name: isinCode
        in: query
        required: true
        schema:
          type: string
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: type
        in: query
        required: true
        schema:
          type: string
          enum:
          - EQUITY
      - name: viewCode
        in: query
        required: true
        schema:
          type: string
      - name: bbgCode
        in: query
        schema:
          type: string
      - name: ricCode
        in: query
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    delete:
      tags:
      - Order Books
      summary: Delete Order Books
      operationId: deleteOrderBookUsingDELETE
      parameters:
      - name: deleteIds
        in: query
        description: deleteIds
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  /exchanges/sessions:
    get:
      tags:
      - Exchanges
      summary: Get available Exchange Sessions (Paid) for the current session
      description: This shows how many sessions are available to the user for the
        type of exchange. <br> The response contains an array with available session
        numbers (paid session bundles).
      operationId: availableSessionsNumberUsingGET
      parameters:
      - name: exchangeTypeId
        in: query
        description: The type of exchange for which you want to get a list of available
          sessions
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                example:
                - 5
                - 10
                - 20
                items:
                  type: integer
                  format: int32
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /exchanges/trading-gateways:
    put:
      tags:
      - Trading Gatways
      summary: Edit Trading Gatway
      operationId: editTradingGatewayUsingPUT
      requestBody:
        description: editingTradingGateway
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FixTradingGateway'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    delete:
      tags:
      - Trading Gatways
      summary: Delete Trading Gateways
      operationId: deleteTradingGatewayUsingDELETE
      parameters:
      - name: deleteIds
        in: query
        description: deleteIds
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  /exchanges/types:
    get:
      tags:
      - Exchanges
      summary: Get available Exchange Types (Paid) for the current sessoin
      description: It shows what types of exchanges the user can create
      operationId: availableExchangeTypeUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                example:
                - exchangeTypeId: 4
                  name: FIX 4.2
                  code: fix42
                - exchangeTypeId: 5
                  name: FIX 4.3
                  code: fix43
                items:
                  $ref: '#/components/schemas/ExchangeType'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /exchanges/{clientExchangeId}:
    get:
      tags:
      - Exchanges
      summary: Get full information about the Exchange
      operationId: getExchangeUsingGET
      parameters:
      - name: clientExchangeId
        in: path
        description: clientExchangeId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exchange'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /exchanges/{clientExchangeId}/start:
    post:
      tags:
      - Exchanges
      summary: Start the Exchange
      operationId: startExchangeUsingPOST
      parameters:
      - name: clientExchangeId
        in: path
        description: clientExchangeId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /exchanges/{clientExchangeId}/stop:
    post:
      tags:
      - Exchanges
      summary: Stop the Exchange
      operationId: forceStopExchangeUsingPOST
      parameters:
      - name: clientExchangeId
        in: path
        description: clientExchangeId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /exchanges/{clientExchangeId}/status:
    get:
      tags:
      - Machine Instances
      summary: Get Exchange Live Status
      operationId: getExchangeLiveStatusUsingGET
      parameters:
      - name: clientExchangeId
        in: path
        description: clientExchangeId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineInstanceStatus'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /exchanges/{clientExchangeId}/trading-gateways:
    get:
      tags:
      - Trading Gatways
      summary: Get Trading Gateways for the Exchange
      operationId: getTradingGatewayJsonUsingGET
      parameters:
      - name: clientExchangeId
        in: path
        description: clientExchangeId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FixTradingGateway'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    post:
      tags:
      - Trading Gatways
      summary: Add new Trading Gateway to the Exchange
      operationId: addTradingGatewayUsingPOST
      parameters:
      - name: clientExchangeId
        in: path
        description: clientExchangeId
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: newTradingGateway
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FixTradingGateway'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /instances/locations:
    get:
      tags:
      - Machine Instances
      summary: List cloud locations
      operationId: listCloudLocationsUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                example:
                - description: New York 1
                  id: nyc1
                - description: Singapore 1
                  id: sgp1
                - description: London 1
                  id: lon1
                - description: New York 3
                  id: nyc3
                - description: Amsterdam 3
                  id: ams3
                - description: Frankfurt 1
                  id: fra1
                - description: Toronto 1
                  id: tor1
                - description: San Francisco 2
                  id: sfo2
                - description: Bangalore 1
                  id: blr1
                items:
                  type: object
                  properties:
                    description:
                      type: string
                    id:
                      type: string
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /instances/performance:
    get:
      tags:
      - Machine Instances
      summary: List supported droplet performances
      operationId: listSupportedDropletPerformanceUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                example:
                - description: PERFORMANCE_1CPU_2GB
                  id: PERFORMANCE_1CPU_2GB
                - description: PERFORMANCE_1CPU_3GB
                  id: PERFORMANCE_1CPU_3GB
                - description: PERFORMANCE_2CPU_4GB
                  id: PERFORMANCE_2CPU_4GB
                - description: PERFORMANCE_4CPU_8GB
                  id: PERFORMANCE_4CPU_8GB
                - description: PERFORMANCE_6CPU_16GB
                  id: PERFORMANCE_6CPU_16GB
                items:
                  type: object
                  properties:
                    description:
                      type: string
                    id:
                      type: string
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /instances/status:
    post:
      tags:
      - Machine Instances
      summary: Get status for all Instances for the current session
      operationId: getInstancesStatusesUsingPOST
      parameters:
      - name: ids
        in: query
        description: ids
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/MachineInstanceStatus'
                example:
                  1198: PENDING
                  1199: PENDING
                  1339: RUNNING
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /instances/{machineInstanceId}/status:
    get:
      tags:
      - Machine Instances
      summary: Get Instance status
      operationId: getInstanceStatusUsingGET
      parameters:
      - name: machineInstanceId
        in: path
        description: machineInstanceId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineInstance'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /payments/pending:
    delete:
      tags:
      - Payments
      summary: Abort payment request
      description: The system stores the user's  subscription request so that he can
        repeat it later in case when something went wrong on a third-party payment
        service. <br> The delete request will remove this stored subscription request
        and reset the session flag indicating that there was a failed subscription.
      operationId: abortChangesRequestUsingDELETE
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  /payments/prices:
    post:
      tags:
      - Payments
      summary: Get prices for the Addons
      operationId: getPaymentsUsingPOST
      requestBody:
        description: Payment Addons
        content:
          application/json:
            schema:
              type: array
              example:
              - sessionNumber: "21"
                exchangePaymentId: fix42
                exchangeId: "1177"
              - sessionNumber: "33"
                exchangePaymentId: fix42
                exchangeId: ""
              - sessionNumber: "12321"
                exchangePaymentId: fix43
                exchangeId: "1178"
              items:
                $ref: '#/components/schemas/UserAddonExchange'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prices'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /payments/validate:
    post:
      tags:
      - Payments
      summary: Validate Addons
      description: Before redirecting the user to a third-party payment service, it
        might be good to verify that the request is correct. <br> The response contains
        the result of checking the request parameters and whether the new subscription
        will cooperate with the current working environment and activated options.
      operationId: checkChangesUsingPOST
      requestBody:
        description: Payment Addons
        content:
          application/json:
            schema:
              type: array
              example:
              - sessionNumber: "21"
                exchangePaymentId: fix42
                exchangeId: "1177"
              - sessionNumber: "33"
                exchangePaymentId: fix42
                exchangeId: ""
              - sessionNumber: "12321"
                exchangePaymentId: fix43
                exchangeId: "1178"
              items:
                $ref: '#/components/schemas/UserAddonExchange'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
              example:
               message: '**** ATTENTION. PLEASE CONFIRM **** <br>You want to decrease your subscription.<br>If you do this, you cannot undo the changes.<br>&emsp;&emsp;<b>Payment is not refundable.</b><br>You want to make the following changes:<br>&emsp;Remove 12 item of FIX 4.3 Sessions<br>&emsp;Remove 1 item of FIX 4.3 Exchange<br>&emsp;Remove 2 item of FIX 4.2 Exchanges<br>&emsp;Remove 54 item of FIX 4.2 Sessions<br><br>After applying the changes, the following exchanges will be removed:<br>&emsp;Exchange 321 with 21 available sessions<br>&emsp;Exchange 412 with 12 available sessions<br>'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /users:
    get:
      tags:
      - Users
      summary: Get User for the current session
      operationId: getCurrentUserUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /uses/profile:
    get:
      tags:
      - Users
      summary: Get User's Metadata for the current session
      operationId: getCurrentUserProfileUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
    put:
      tags:
      - Users
      summary: Update User's Metadata for the current session
      description: Sets additional parameters about the user, such as name, country, gender
      operationId: updateUserInformationPostUsingPUT
      requestBody:
        description: metadata
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /users/info:
    get:
      tags:
      - Users
      summary: Get static User Info for the current session
      operationId: getCurrentUserInfoUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /users/session:
    get:
      tags:
      - Users
      summary: Get current session information
      description: The response contains information about whether the session is autoresized and whether the user has incomplete subscriptions
      operationId: statusCheckUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  isAuthenticated:
                    type: boolean
                    example: true
                  isPending:
                    type: boolean
                    example: false
                      
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
components:
  schemas:
    ExchangeInfo:
      title: ExchangeInfo
      type: object
      properties:
        clientExchangeId:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        exchangeType:
          $ref: '#/components/schemas/ExchangeTypeInfo'
        machineInstance:
          $ref: '#/components/schemas/MachineInstanceInfo'
    Exchange:
      title: Exchange
      type: object
      properties:
        exchangeId:
          type: string
          example: "1176"
        clientExchangeId:
          type: string
          example: "1"
        name:
          type: string
          example: ExchangeName
        description:
          type: string
          example: Description text
        exchangeTypeId:
          type: string
          example: "4"
        userId:
          type: string
          example: auth0|5d9735410f994b0dffd0955e
        createdDate:
          type: string
          example: "1570541505000"
        updatedDate:
          type: string
          example: "1570544473000"
        machineInstanceId:
          type: string
          example: "1197"
        availableSessions:
          type: string
          example: "21"
        displayId:
          type: string
          example: EX-0001
        exchangeType:
          $ref: '#/components/schemas/ExchangeType'
        machineInstance:
          $ref: '#/components/schemas/MachineInstance'
        orderBooks:
          type: array
          items:
            $ref: '#/components/schemas/OrderBook'
        tradingGateways:
          type: array
          items:
            $ref: '#/components/schemas/FixTradingGateway'
    ExchangeTypeInfo:
      title: ExchangeTypeInfo
      type: object
      properties:
        name:
          type: string
          example: FIX 4.2
    ExchangeType:
      title: ExchangeType
      type: object
      properties:
        exchangeTypeId:
          type: string
          example: "4"
        name:
          type: string
          example: FIX 4.2
        region:
          type: string
          example: AMERICAS
        description:
          type: string
          example: ""
        code:
          type: string
          example: fix42
    MachineInstance:
      title: MachineInstance
      type: object
      properties:
        status:
          type: string
          example: RUNNING
        ipAddress:
          type: string
          example: 134.209.233.153
        domain:
          type: string
          example: wss-162173682.etpmarkets.com
        createdDate:
          type: string
          example: "1570541505000"
        updatedDate:
          type: string
          example: "1570541660000"
        location:
          type: string
          example: Frankfurt 1
        ram:
          type: string
          example: "2048"
        processor:
          type: string
          example: "1"
    MachineInstanceInfo:
      title: MachineInstanceInfo
      type: object
      properties:
        status:
          type: string
          example: RUNNING
    OrderBook:
      title: OrderBook
      type: object
      properties:
        orderBookId:
          type: string
          example: "1420"
        clientOrderBookId:
          type: string
          example: "1"
        name:
          type: string
          example: ABCTT
        viewCode:
          type: string
          example: ABC
        isinCode:
          type: string
          example: ABC
        bbgCode:
          type: string
          example: ""
        ricCode:
          type: string
          example: ""
        type:
          type: string
          example: EQUITY
        defaultOpeningPrice:
          type: string
          example: "0"
        displayId:
          type: string
          example: OB-000001
    FixTradingGateway:
      title: FixTradingGateway
      type: object
      properties:
        trGwyId:
          type: string
          example: "1557"
        name:
          type: string
          example: TestTradingGateway1
        port:
          type: string
          example: "1086"
        displayId:
          type: string
          example: TR-01557
        overrideFields:
          type: string
          example: null
        resetOnLogon:
          type: string
          example: "true"
        cancelOnDisconnect:
          type: string
          example: "false"
        fixSessions:
          type: array
          items:
            $ref: '#/components/schemas/FixSessions'
    FixSessions:
      title: FixProtocolSession
      type: object
      properties:
        fixSessionId:
          type: string
          example: "3725"
        targetCompId:
          type: string
          example: Receiver11
        senderCompId:
          type: string
          example: Sender11
        targetSubId:
          type: string
          example: null
        senderSubId:
          type: string
          example: null
        targetLocationId:
          type: string
          example: null
        senderLocationId:
          type: string
          example: null
        startTime:
          type: string
          example: 00:00:00
        stopTime:
          type: string
          example: 00:00:00
        heartbeatInterval:
          type: string
          example: "30"
        reconnectInterval:
          type: string
          example: "30"
    Prices:
      title: Prices for Addons
      type: object
      properties:
        payNow:
          type: string
          example: "115458.42"
        payNextMonth:
          type: string
          example: "123900.0"
    User:
      title: User
      type: object
      properties:
        userId:
          type: integer
          example: 176
        loginId:
          type: string
          example: 'auth0|5d9735410f994b0dffd0955e'
        status:
          type: integer
          example: 2
        userPlan:
          $ref: '#/components/schemas/UserPlan'
    UserPlan:
      title: User Plan
      type: object
      properties:
        planPaymentId:
          type: string
          example: "extended-technical-support"
        trialDays:
          type: integer
          example: 
    UserAddonExchange:
      title: User Addon Exchange
      type: object
      properties:
        sessionNumber:
          type: string
          example: "21"
        exchangePaymentId:
          type: string
          example: fix42
        exchangeId:
          type: string
          example: "1177"
    UserInfo:
      title: UserInfo
      type: object
      properties:
        loginId:
          type: string
          example: 'auth0|5d9735410f994b0dffd0955e'
        email:
          type: string
          example: 'user@esprow.com'
        username:
          type: string
          example: 'John Lennon'
    ResponseMessage:
      title: Response Message
      type: object
      properties:
        message:
          type: string
      example:
        message: OK
    MachineInstanceStatus:
      type: string
      enum:
      - PENDING
      - RUNNING
      - RESTARTING
      - SUSPENDING
      - SUSPENDED
      - RESUMING
      - TERMINATING
      - TERMINATED
      - ARCHIVING
      - ARCHIVED
      - RESTORING
      - PROVIDER_CANT_CREATE_INSTANCE
      - LOST
